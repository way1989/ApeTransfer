apply plugin: 'com.android.application'
apply plugin: 'android-apt'

android {
    compileSdkVersion rootProject.ext.compileSdkVersion
    buildToolsVersion rootProject.ext.buildToolsVersion

    defaultConfig {
        applicationId "com.ape.transfer"
        minSdkVersion rootProject.ext.minSdkVersion
        targetSdkVersion rootProject.ext.targetSdkVersion
        versionCode VERSION_CODE.toInteger()
        versionName VERSION_NAME
    }
    signingConfigs {
        release {
            def filePrivateProperties = file("../local.properties")
            if (filePrivateProperties.exists()) {
                Properties propsPrivate = new Properties()
                propsPrivate.load(new FileInputStream(filePrivateProperties))

                storeFile file(propsPrivate['key.store'])
                keyAlias propsPrivate['key.alias']
                storePassword propsPrivate['key.store.password']
                keyPassword propsPrivate['key.alias.password']
            }
        }
    }
    buildTypes {
        debug {
            // 显示Log
            buildConfigField "boolean", "LOG_DEBUG", "true"
            //是否开启BUGLY
            buildConfigField "boolean", "BUGLY_ENABLED", "false"
            buildConfigField "int", "BUGLY_APPID", BUGLY_APPID
            buildConfigField "int", "FEEDBACK_APPKEY", FEEDBACK_APPKEY
        }
        release {
            // 不显示Log
            buildConfigField "boolean", "LOG_DEBUG", "false"
            //是否开启ACRA
            buildConfigField "boolean", "BUGLY_ENABLED", "true"
            buildConfigField "int", "BUGLY_APPID", BUGLY_APPID
            buildConfigField "int", "FEEDBACK_APPKEY", FEEDBACK_APPKEY
            signingConfig signingConfigs.release
            shrinkResources true
            minifyEnabled true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }

    applicationVariants.all { variant ->//获取 variant 参数，就是 productFlavor x buildType
        variant.outputs.each { output ->//获取输出文件
            def file = output.outputFile//修改实例
            if (file != null && file.name.endsWith('release.apk')) {//变种名以release.apk结尾时才修改名字
                //def fileName = file.name.replace(file.name, "ApeScreenshot_V" + versionName + "_${buildTime()}.apk")
                def fileName = file.name.replace(file.name, "ApeTransfer" + "_V" + variant.versionName + ".apk")
                output.outputFile = new File(file.parentFile, fileName)
            }
        }
    }

    lintOptions {
        abortOnError false
    }
}

dependencies {
    compile fileTree(include: ['*.jar'], dir: 'libs')
    testCompile "junit:junit:$rootProject.junitVersion"
    compile "com.android.support:appcompat-v7:$rootProject.supportLibraryVersion"
    compile "com.android.support:design:$rootProject.supportLibraryVersion"
    compile "com.jakewharton:butterknife:$rootProject.butterknifeVersion"
    apt "com.jakewharton:butterknife-compiler:$rootProject.butterknifeVersion"
    //bugly
    compile "com.tencent.bugly:crashreport:$rootProject.buglyVersion"
    compile "org.nanohttpd:nanohttpd:$rootProject.nanohttpdVersion"
    compile "com.google.zxing:core:$rootProject.zxingVersion"

//    compile project(':emoji')
//    compile project(':filepicker')
//    compile project(':photopicker')
    compile project(':backuprestore')

    compile 'org.greenrobot:eventbus:3.0.0'
    compile 'com.github.bumptech.glide:glide:3.7.0'
    compile 'de.hdodenhof:circleimageview:2.1.0'

    compile(name:'feedbackSdk',ext:'aar')

    compile 'com.github.hotchemi:permissionsdispatcher:2.1.3'
    apt 'com.github.hotchemi:permissionsdispatcher-processor:2.1.3'
}
